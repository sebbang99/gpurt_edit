/* Copyright (c) 2022-2023 Advanced Micro Devices, Inc. All rights reserved. */

// ============================================================================
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code was auto-generated by settings_codegen.py. Do not modify manually.
// ============================================================================

#pragma once

#include <dd_settings_base.h>
#include <dd_settings_blob.h>
#include <dd_optional.h>

namespace vk
{


/// Enums /////////////////////////////////////////////////////////////////////
enum ExpShaderWaveSize :  uint32_t 
{
    ExpWaveSizeAuto = 0x0, // Select automatically
    ExpWaveSizeWave64 = 0x2, // Force 64 threads per wave
    ExpWaveSizeWave32 = 0x3, // Force 32 threads per wave
    ExpWaveSizeInvalid = 0x4, // Invalid Wave Size
};

enum ExpVSyncControl :  uint32_t 
{
    ExpVSyncControlAlwaysOff = 0x0, // Force Vsync Off.
    ExpVSyncControlAlwaysOn = 0x1, // Force Vsync On.
    ExpVSyncControlInvalid = 0x2, // Invalid value.
};

struct ExpSettings
{
    // Disable mesh shader support as reported by graphics API.
    DevDriver::Optional<bool> expMeshShaderSupport;

#if VKI_RAY_TRACING
    // Disable support for ray tracing as reported by graphics API.
    DevDriver::Optional<bool> expRayTracingSupport;
#endif

    // Disable support for variable rate shading as reported by graphics API.
    DevDriver::Optional<bool> expVariableRateShadingSupport;

    // Disable support for native 16-bit types in shaders.
    DevDriver::Optional<bool> expNative16BitTypesSupport;

    // Disable support for custom AMD extensions, as offered by AMD GPU Services library in DX12 and
    // VK_AMD_* extensions in Vulkan.
    DevDriver::Optional<bool> expAmdVendorExtensions;

    // Disable asynchronous compute queues. When disabled, Vulkan doesn't expose additional compute queues.
    DevDriver::Optional<bool> expComputeQueueSupport;

    // Disable barrier optimizations.
    DevDriver::Optional<bool> expBarrierOptimizations;

    // Disable miscellaneous shader compiler optimizations.
    DevDriver::Optional<bool> expShaderCompilerOptimizations;

#if VKI_RAY_TRACING
    // Disable optimizations applied when building ray tracing acceleration structures.
    DevDriver::Optional<bool> expAccelStructureOpt;
#endif

    // Force specific wave (subgroup) size in all vertex shaders where possible.
    DevDriver::Optional<ExpShaderWaveSize> expVsWaveSize;

    // Force specific wave (subgroup) size in all tess control shaders where possible.
    DevDriver::Optional<ExpShaderWaveSize> expTcsWaveSize;

    // Force specific wave (subgroup) size in all tess eval shaders where possible.
    DevDriver::Optional<ExpShaderWaveSize> expTesWaveSize;

    // Force specific wave (subgroup) size in all geometry shaders where possible.
    DevDriver::Optional<ExpShaderWaveSize> expGsWaveSize;

    // Force specific wave (subgroup) size in all fragment shaders where possible.
    DevDriver::Optional<ExpShaderWaveSize> expFsWaveSize;

    // Force specific wave (subgroup) size in all compute shaders where possible.
    DevDriver::Optional<ExpShaderWaveSize> expCsWaveSize;

    // Force specific wave (subgroup) size in all mesh shaders where possible.
    DevDriver::Optional<ExpShaderWaveSize> expMsWaveSize;

#if VKI_RAY_TRACING
    // Disables Ray tracing shader inlining
    DevDriver::Optional<bool> expRayTracingPipelineCompilationMode;
#endif

    // Disable shader cache.
    DevDriver::Optional<bool> expShaderCache;

    // Disable texture color compression.
    DevDriver::Optional<bool> expTextureColorCompression;

    // Zero unbound descriptors.
    DevDriver::Optional<bool> expZeroUnboundDescriptors;

    // Make command allocators thread safe.
    DevDriver::Optional<bool> expThreadSafeCommandAllocator;

    // Enable / disable vertical synchronization.
    DevDriver::Optional<ExpVSyncControl> expVerticalSynchronization;


};

const uint32_t g_experimentsNumSettings = 22;

constexpr DD_SETTINGS_NAME_HASH expMeshShaderSupportHash = 1379448439;
constexpr const char* pExpMeshShaderSupportHashStr = "#1379448439";
#if VKI_RAY_TRACING
constexpr DD_SETTINGS_NAME_HASH expRayTracingSupportHash = 543981301;
constexpr const char* pExpRayTracingSupportHashStr = "#543981301";
#endif
constexpr DD_SETTINGS_NAME_HASH expVariableRateShadingSupportHash = 3193362027;
constexpr const char* pExpVariableRateShadingSupportHashStr = "#3193362027";
constexpr DD_SETTINGS_NAME_HASH expNative16BitTypesSupportHash = 2547327847;
constexpr const char* pExpNative16BitTypesSupportHashStr = "#2547327847";
constexpr DD_SETTINGS_NAME_HASH expAmdVendorExtensionsHash = 1164580706;
constexpr const char* pExpAmdVendorExtensionsHashStr = "#1164580706";
constexpr DD_SETTINGS_NAME_HASH expComputeQueueSupportHash = 2569974963;
constexpr const char* pExpComputeQueueSupportHashStr = "#2569974963";
constexpr DD_SETTINGS_NAME_HASH expBarrierOptimizationsHash = 907685067;
constexpr const char* pExpBarrierOptimizationsHashStr = "#907685067";
constexpr DD_SETTINGS_NAME_HASH expShaderCompilerOptimizationsHash = 3083800050;
constexpr const char* pExpShaderCompilerOptimizationsHashStr = "#3083800050";
#if VKI_RAY_TRACING
constexpr DD_SETTINGS_NAME_HASH expAccelStructureOptHash = 1388129946;
constexpr const char* pExpAccelStructureOptHashStr = "#1388129946";
#endif
constexpr DD_SETTINGS_NAME_HASH expVsWaveSizeHash = 144654339;
constexpr const char* pExpVsWaveSizeHashStr = "#144654339";
constexpr DD_SETTINGS_NAME_HASH expTcsWaveSizeHash = 1736388690;
constexpr const char* pExpTcsWaveSizeHashStr = "#1736388690";
constexpr DD_SETTINGS_NAME_HASH expTesWaveSizeHash = 809438432;
constexpr const char* pExpTesWaveSizeHashStr = "#809438432";
constexpr DD_SETTINGS_NAME_HASH expGsWaveSizeHash = 1765187754;
constexpr const char* pExpGsWaveSizeHashStr = "#1765187754";
constexpr DD_SETTINGS_NAME_HASH expFsWaveSizeHash = 2064626195;
constexpr const char* pExpFsWaveSizeHashStr = "#2064626195";
constexpr DD_SETTINGS_NAME_HASH expCsWaveSizeHash = 632364646;
constexpr const char* pExpCsWaveSizeHashStr = "#632364646";
constexpr DD_SETTINGS_NAME_HASH expMsWaveSizeHash = 220180660;
constexpr const char* pExpMsWaveSizeHashStr = "#220180660";
#if VKI_RAY_TRACING
constexpr DD_SETTINGS_NAME_HASH expRayTracingPipelineCompilationModeHash = 2081587148;
constexpr const char* pExpRayTracingPipelineCompilationModeHashStr = "#2081587148";
#endif
constexpr DD_SETTINGS_NAME_HASH expShaderCacheHash = 2979642057;
constexpr const char* pExpShaderCacheHashStr = "#2979642057";
constexpr DD_SETTINGS_NAME_HASH expTextureColorCompressionHash = 4004568636;
constexpr const char* pExpTextureColorCompressionHashStr = "#4004568636";
constexpr DD_SETTINGS_NAME_HASH expZeroUnboundDescriptorsHash = 954965599;
constexpr const char* pExpZeroUnboundDescriptorsHashStr = "#954965599";
constexpr DD_SETTINGS_NAME_HASH expThreadSafeCommandAllocatorHash = 1291736091;
constexpr const char* pExpThreadSafeCommandAllocatorHashStr = "#1291736091";
constexpr DD_SETTINGS_NAME_HASH expVerticalSynchronizationHash = 502459990;
constexpr const char* pExpVerticalSynchronizationHashStr = "#502459990";
// =======================================================================================
// SettingsBlob

class ExperimentsSettingsBlobNode : public DevDriver::SettingsBlobNode
{
public:
    const uint8_t* GetBlob(uint32_t* pOutSize) override;
    bool IsEncoded() override;
    uint32_t GetMagicOffset() override;
    uint64_t GetBlobHash() override;
};


} // vk

